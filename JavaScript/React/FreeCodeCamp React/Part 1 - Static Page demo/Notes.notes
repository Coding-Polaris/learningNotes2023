Content begins @ 2:00

1. Welcome

    1. Do stuff the hard way - This course is based on projects

    2. Actively, not passively learn

    3. Space learning!

    4. Drill, drill, drill. Repeat exercises

2. Why React?

    1. Composable code

        1. Create a large object out of a bunch of small discrete objects

        2. Typical web pages can be really long, but may consist of a lot of re-used things like links, buttons, etc

        3. React lets us populate the same, re-used component or collections of components, just with new/needed info

        4. In other words, a lot less repetition, behavior described across multiple small files instead of one large monolith

        5. More flexible/modular (reusable and consistent across many pages) and easier to test/maintain

    2. React is Declarative

        1. Declarative - What do we want to do? (abstracting away details)

        2. Imperative - How do we do what we want to do? (describing full detail of each task)

        3. Check the Example 4 code in index.js - reduce a bunch of vanilla js commands to build up an HTML component to one React command that creates the fully-described element

        4. (this doesn't oppose composition, actually it works because of composition)

3. JSX

    1. Javascript XML

    2. Think of it as a flavor of JavaScript that *looks like* html

    3. This was the key piece that made React declarative rather than imperative

    4. Remember that `className` in JSX elements must be used in React instead of `class` as is traditionally used on HTML elements

    5. That's because class is a reserved word

    6. Key difference between JSX and vanilla JS elements (see 5th example) in index JS:

        1. At its core, running JSX returns JavaScript objects containing a description of the HTML object we want.

            1. keys of the object:

                1. type - type of HTML object

                2. props: an object containing things like className and children (including text content)

        2. `console.log(vanillaElement)` returns html

    7. Remember that you can only return a single overarching parent element in JSX

    8. You can have as many nested elements as you want, but you can't have more than one at the top level

    9. If you must return multiple sibling elements, wrap them in a div or <></>

    10. You can save JSX directly into variables, provided you wrap them in parentheses - don't need a function declaration

    11. However, this means you can't use Components in other JSX, making variables less versatile

4. React 18 Changes

    1. This command is going to be deprecated in favor of `createRoot`

    2. Instead of `import ReactDOM from "react-dom"`,

    3. Add `/client` to the end of the call, e.g. `import ReactDOM from "react-dom/client"`

    4. The original command is `ReactDOM.render(<what to render>, <where to render it>)`

    5. Now instead, create a root first with `ReactDOM.createRoot(document.getElementById("root"))`

    6. You can then chain the `.render(<what to render>)` method onto this newly defined root

    7. See code in section 6 index.js

5. A quick thought experiment: .append() vs ReactDOM.render()

    1. See Section 6 in index.js

6. Custom Components

    1. Saving JSX as a variable isn't as flexible as Components

    2. In programming generally, functions are reusable pieces of code

    3. Components are basically this concept extended to pieces of webpages

    4. Example:

    function ThingieComponent() {
        return (<some jsx></some jsx>);
    }

7. Parent/Child components

    1. See Mini Challenges 1 & 2 in index.js.

8. Styling with classes

    1. Remember that JSX needs you to use `className=` instead of `class=`.

    2. See index.css

9. Organize components

    1. Ziroll's opinion: One file for one component

    2. When abstracting into new files, you'll always have to:

        1. `import React from "react"` in the new file so the JSX can be parsed

        2. `export [default] <NewComponent name>` the class, component, or function you want to use in the main file

        3. `import <NewComponent name> from 'component'` in the main file so you can use the component

        4. Remember you can and may have to specify folder in `from <directory>`, as in `import NewComponent from "./new_component"`

        5. You don't need ".js" at the end of an `import` statement, since JS assumes the file extension is JS by default

10. Running locally with Vite (I'll use this for the future course projects)

    1. Tool that helps create local React apps

    2. French for "quick" or "fast"

    3. Better for production

    4. Handles compilation/transpilation, polyfill, bundling, etc.

    5. Vite uses esbuild, much faster than create-react-app for local dev

    6. Dependencies: node + NPM

    7. create w/ `npm create vite@latest`

    8. select framework and javascript flavor

    9. to run, `npm run dev` in target directory

    10. You can import (as a variable) image files from specific paths,

    11. e.g. `import logo from "./scrimba-logo.png"` allows you to reference the image path with `logo` in the code

    12. This is doable because bundlers actually include images in the bundle file

    13. The same can be done with CSS files, or really anything that can be bundled that you want to reference in your app/page

11. Project outlining

    1. Before starting to code a project, take a glance over a template that you want to create

    2. Model it in your mind, or preferably on paper

    3. Suppose a small page with:

        1. Two spaced elements in a header bar
        2. A large text header in the body beneath the header
        3. A list of text items
        4. What appears to be a fixed background image on the righthand side

    4. How to model?

        student answer:

            1. body margin 0 for 100% width header
            2. flex for the header and space-evenly with a 2-item UL: a div with the react image and app logo, and the subsection div on the right
            3. h1 for the big text
            4. ul for list
            5. image position fixed on right

        tutor's answer:

            1. divide into two sections
            2. header: image, logo, section title. do margin: auto for even spacing
            3. the body with hi and list
            4. the tutor thinks these two major groups should be their own components
            5. then group the components together in the "app" or page

12. Figma

    1. Sign up, verify email, etc.

    2. Starter plan PLEEEASE!

    3. "Explore by yourself"

    4. https://www.youtube.com/watch?v=ybc2gkvjMDs

    5. For Scrimba, don't try to modify the files

    6. Turn off multiplayer cursors in options for lower distractions

    7. View-only mode rather than editing

    8. File -> Duplicate to your drafts lets you basically fork a design file

    9. Clicking an element behaves a lot like the inspector in your browser, but more geared for front-end design

    10. Careful if copying CSS: It tends to use `position: absolute;` for everything

    11. But font style etc. can be useful

    12. Round font sizes to nearest

13. Navbar + styling

    1. See folder for "Final Product"