Chapter 5 - React with JSX

1. Intro

    i. JSX = JavaScript + XML

    ii. JS extension that allows XML-type elements directly in JS code

2. React Elements as JSX

    i. Element type specified with tag (<IngredientsList> in last chapter)

    ii. Attributes = element's properties

    iii. Children go between opening and closing tags

    iv. JSX looks much like HTML/XML, just that you can stick components in it too

    Non-JSX React:

            // Create IngredientsList from defined component. listOfIngredients = some array of components
            react.createElement(IngredientsList, {list: listOfIngredients});

            <IngredientsList list="{listOfIngredients}"></IngredientsList>

    v. Properties can be either JS expressions (any code statement that returns a value) or strings

    vi. As seen above, you can pass JavaScript expressions to JSX properties (list=etc...) by surrounding them with {}

3. JSX Tips

    i. Nest components - Components may be children of other components

    ii. className - remember that class is reserved in JS; to have a HTML/CSS class, you must use className=

    iii. JavaScript expressions + evaluation

        a. Pretty much string interpolation.

        b. Anywhere you put { someJavaScriptCode(); } the return value of the expression goes into the JSX there

4. Mapping Arrays with JSX

    You can put JSX directly inside JS functions to build more JSX:

            {props.ingredients.map((ingredient, i) => (
                <li key="{i}">{ingredient}</li>
            ))}

5. Babel - https://babeljs.io/

    i. A compiler that allows React and JSX to function in older browsers

    ii. Converts JSX to pure JavaScript

    iii. Wrap JSX in legacy windows with <script type="text/babel"></script>

    iv. Precompiling only necessary for production Babel

6. Recipes as JSX

    i. JSX can't be directly read by browsers; it's converted to JS first

    ii. Begin long example right... now

    iii. Suppose we have a `data` array containing two recipes

    iv. Each `recipe` has 3 keys: `name`, `ingredients`, and `steps`

    v. With JSX, how do we roll these into reusable components that display the data?

            const data = [...];

            function Menu (props) {
                return (
                    <article>
                        <header>
                            <h1>{props.title}</h1>
                        </header>
                        <div className="recipes">
                            {props.recipes.map((recipe, i) => (
                                <Recipe
                                    key={i}
                                    name={recipe.name}
                                    ingredients={recipe.ingredients}
                                    steps={recipe.steps}
                                />
                            ))}
                        </div>
                    </article>
                );
            };

            function Recipe (props) {
                [...]
            };

            ReactDOM.render(
                <Menu recipes={data} title="Delicious Recipes" />,
                document.getElementById("root")
            );

    vi. Spread operator can be used in the map call:

            props.recipes.map((recipe, i) => <Recipe key={i} {...recipe} \>);

    This is a drop-in replacement for the name...ingredient...steps= verbose code above;

    BUT remember that it will pass ALL properties, so don't use it if it has information you don't want

    vii. Remember that props can be replaced with object destructuring { title, recipes } so that we
    don't have to repeat calls to props in the code

            function Menu ({ title, recipes }) {
                // ...
                <h1>{title}</h1>/ // extra slash just for syntax highlighting fix for notes
                // ...
                { recipes.map ... }
            }

    viii. Full implementation in Demos folder

7. React Fragments

    i. Rendering two sibling components with fragments:

    Valid starter code:

            function Cat({ name }) {
                return <h1>The cat's name is {name}</h1>;
            };

            ReactDOM.render(<Cat name="Jungle" />, document.getElementbyId("root"));

    ii. Invalid code where we try to add a sibling:

            function Cat({ name }) {
                return (
                    <h1>The cat's name is {name}</h1>
                    <p>He's a good boy.</p>
                );
            };

    React can't handle orphaned siblings. They must have one parent element at the top level.

    iii. At one point, you had to use divs, which bloated the page.

    iv. Nowadays, to delineate multiple siblings you can just use <>*insert siblings here*</>

    v. <> is shorthand for <React.fragment></React.fragment>

8. Intro to Webpack

    Comprehensive, better resource here:

    https://webpack.js.org/configuration/devtool/

    i. Questions book asks us to consider:

        a. How to deal with JSX and ESNext transformations?

        b. How do we manage library/other software dependencies?

        c. How do we manage image/CSS optimization?

    ii. Tools used (in 2020) to answer these questions:

        a. Browserify

        b. gulp

        c. Grunt

        d. Prepack

        e. But the hero of this story is webpack (due to featureset/support/wide adoption)

    iii. React tools include

        a. create-react-app

        b. Gatsby

        c. Code Sandbox

    iv. Webpack is a "module bundler"

        a. Takes assets and compiles them into a single file

        b. Book says it makes source code able to be broken into modular parts?

        c. By being a single file, only one HTTP request needs to be made to load the assets rather than many

    v. Other functions of webpack

        a. Splitting code into chunks (also called rollups or layers) specific to different pages or devices

        b. Minifying, or removing all extraneous characters and reducing variable names to minimal lengths
        (reduce size in transit and on client side, but not functionality)

        c. Feature flagging - Sending code to any number except all environments to test new features

        d. Hot Module Replacement (HMR) - Updates changed source code on the fly

    vi. Team development benefits of webpack (according to book):

        a. Modularity - Different people can work on different files/modules which can be imported/exported
        (? How is this different than normal development or something like an asset pipeline?)

        b. Composition - Creating lots of small, simple components and combining for functionality.
        Easier to write, test, and replace than large imperative monoliths

        c. Speed - Minifying and lower latency with single HTTP request = faster than many for unminified code

        d. Consistency - Babel/webpack can handle latest changes to JS/JSX, so backward compatibility
        isn't a worry; behavior will be the same in older browsers thanks to automatic back-translation

    vii. Demo Project

        a. Create

            cd /JavaScript/React/Demos/LR-ch5-Recipes-Webpack/

            npm init -y
            npm install react react-dom serve

            recipes-app
                node_modules
                package.json
                package-lock.json
                index.html
                /src
                    index.js
                    /data
                        recipes.json
                    /components
                        Recipe.js
                        Instructions.js
                        Ingredients.js 

        b. Break components into modules

            - Move recipe into ./src/data/components/Recipe.js

            - Top the file with `import React from "react";`

            - Make it a module with "export default"

            - Put the data into its own json file and read it

                (gnarly tangentially related regex lesson from js to json conversion here:
                \w+(?=:) to find unquoted keys, then replace with "$0" where $0 is the text the regex finds)

            - Separate ingredients section -> IngredientsList -> Ingredient and instructions section -> Instruction
            (see files in the components folder)

            - Import the broken-out modules into Recipe, Recipe and Menu into their own respective files

            - Remove <script> tags with React/ReactDOM from main page, and move with all other imports/final render to index.js:

                import React from "react";
                import { render } from "react-dom";
                import Menu from "./components/Menu";
                import data from "./data/recipes.json";

                ReactDOM.render(
                    <Menu recipes={data} title="Delicious Recipes" />,
                    document.getElementById("root")
                );

        c. webpack build

            - npm install --save-dev webpack webpack-cli

            - while webpack does have a default option that doesn't
            require a config file,

            - this example will have us build one for understanding's sake

        d. we have this kind of Russian doll thing where each file with an `import`
        will `import` other files that *themselves* `import` the files *they* need

        e. This creates a tree of `import`s between files called a "dependency graph".
        If we were running this manually in the browser, we'd start by running the first file in the tree.

        f. webpack is able to do this automatically

        g. import was not standard JS at one point, and must typically be reconciled with Babel in older browsers

        h. In our config, we need to tell webpack to run JSX -> React elements

        i. webpack.config.js - just another module that exports a {} containing instructions for webpack

        j. it always goes in the root folder of an app

        k. Check demo folder for code

        l. install Babel dependencies

            npm install babel-loader @babel/core --save-dev

            npm install @babel/preset-env @babel/preset-react --save-dev

        m. webpack config: entry, output, module

        n. finally, .babelrc presets file

        o. time to run webpack??

            npx webpack --mode development

        p. when this is done, errors will usually manifest from dependency tree issues

        q. indeed, had tons of syntax problems with JS and JSON. nice way of finding these without
        running in the browser and hand-combing each file wondering why nothing renders

        r. Can also add this npm script to package.json to create a webpack running shortcut

            "scripts": {
                "build": "webpack --mode production"
            }

            followed by

            npm run build

        s. Yay!

            Bundle built. The book says it should be in the `dist` folder, which is also where index.html should go.

        t. After hacking together a basic Ruby WEBrick server for my index.html to avoid CORS with trying to open it with the filesystem,
        my poor app renders absolutely nothing.

        Fiddling a lot with urls and content-types and placement in the page and server settings finally yields
        that ReactDOM can't be found.

        The next section is source mapping, which will tell me which of my files in the bundle go where.
        Maybe this can tell me if ReactDOM is properly included?

        I also did a "npm install react-dom --save-dev", solving the aforementioned.

        u. After a ton of additional headaches with undefined methods and variables of my own design in the bundle,
        it looks like it's time to look at the next section to help resolve the exact location and nature of bugs.

    viii. Source mapping

        a. Creates a map of the bundle's dependency tree and the individual files.
        Great for debugging.

        b. Added this to the webpack config js:

            module.exports = {
                // ...
                devtool: "source-map"
            };

            Apparently it's outdated in webpack 5.

        c. With the map, you can debug your JS as though the browser had loaded them all individually

        d. Use breakpoints + Scope + Watch panels to evaluate code and variables at different points

    ix. Create React App

        a. Auto generator for a simple React app, not unlike `rails g`

        b. Inteded to avoid needing to configure webpack

        c. `npm install -g create-react-app`

        d. `create-react-app <destination-folder-name>`

        e. Creates project with 3 dependencies: React, ReactDOM, react-scripts

        f. react-scripts pulls in Babel, ESLint, webpack, and other React dependencies

        g. Creates directory + file `./src/App.js`

            - root of app's dependency tree; put your starting import statements here

            - can edit Root Component here

        h. `npm start` or `yarn start` when in project root folder to start a server instance on port 3000

        i. `npm test` `yarn test` run project tests interactively

        j. `npm run build` `yarn build` creates full JSX -> JS/ES6 -> ESNow + minified bundle

        